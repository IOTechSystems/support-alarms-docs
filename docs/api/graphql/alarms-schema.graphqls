#
# Copyright (C) 2024 IOTech Ltd
#
scalar Any

"""
Represents a lifecycle of states from active to inactive
!!! This is not currently implemented !!!
"""
type StateGroup {
    """
    Unique Identifier for the state group
    """
    id: ID!

    """
    Identifier for alarm that this state group i
    """
    alarmId: ID!

    """
    Time ordered list of states from active to inactive state
    """
    stateIds: [ID!]

    """
    Head and Tail of states from the states list
    """
    initialState: AlarmState
    currentState: AlarmState

    """
    Boolean on whether this group is historical
    I.E. the states in this group have gone active and then inactive
    """
    complete: Boolean
    """
    A Float containing the duration from active to inactive state.
    This will be nil if it is not complete
    """
    duration: Float

    """
    Current process value that triggered the alarm
    """
    triggeredValue: Any

}

"""
Represents a specific state of an alarm at a point in time
"""
type AlarmState {
    """
    Unique identifier for the alarm state.
    Used in mutations such as AcknowledgeState to perform that function on the alarm state.
    """
    id: ID!

    """
    Unique identifier for the alarm that this state is assocated with
    """
    alarmId: ID!

    """
    Severity level of the alarm.
    Value is based on configured ranges in the alarm service.
    """
    severity: SeverityType!

    """
    Optional comment associated with this state
    """
    comment: String

    """
    Is the state is of interest to a client.
    This can indicate that some action is still required e.g Acknowledgement
    """
    retain: Boolean!

    """
    Is the alarm enabled?
    The primary states of a Alarm's Condition are disabled and enabled.
    The Disabled state is intended to allow Conditions to be turned off at the Server, disabling the alarm.
    """
    enabled: Boolean!

    """
    Acknowledged state of the alarm.
    When true it indicates indicates recognition of an Alarm condition being active.
    For example a alarm is triggered, The engineer see this and then acknowledges the alarm is active.
    """
    acked: Boolean!

    """
    Confirmed state of the alarm.
    When set to true it indicates a corrective action has been taken to address the cause of the Alarm
    """
    confirmed: Boolean

    """
    The active state of the alarm.
    When True this indicates that the evaluation of the condition the alarm is based upon has returned True.
    Transitions of this state back to False can only be done through the result of the evaluation of the condition the alarm is based upon.
    """
    active: Boolean!

    """
    The suppressed state of the alarm.
    An Alarm is suppressed when logical criteria are applied to determine that the Alarm should not
    occur, even though the base Alarm Condition (e.g. Alarm setting exceeded) is present
    Typically used by the system to suppress alarms due to system specific reasons.
    """
    suppressed: Boolean

    """
    The shelved state of the alarm. Suggests whether an alarm shall be prevented from being displayed to the user.
    Indicates that system operators have blocked a nuisance alarm.
    """
    shelved: Boolean

    """
    The service state of the alarm. Used to indicate that an alarm is in maintenance.
    Used to ignore alarms from a device that is undergoing maintenance.
    """
    outOfService: Boolean

    """
    The latched state of the alarm. If true the alarm requires additional processing.
    If latching is enabled for the alarm - Once the alarm becomes active this value will be set to true and will remain true until until the state is no longer active,
    is acknowledged, is confirmed (if required) and then reset. The retain property will remain true also for this period.
    """
    latched: Boolean

    """
    Time the state occurred.
    This is a Unix timestamp.
    """
    timestamp: String!

    """
    The alarm routing status
    """
    routed: RoutedStatus

    """
    ID of the user who caused this state change (null if system-generated)
    !!! This is not currently implemented !!!
    """
    userId: String

    """
    Status code of the alarm state
    !!! This is not currently implemented !!!
    """
    status: Int!
}

"""
Represents a complete alarm entity with its current state and history
"""
type Alarm {
    """
    Unique identifier for the alarm
    """
    id: ID!

    """
    Last State Group for this Alarm
    !!! This is not currently implemented !!!
    """
    currentStateGroupId: ID

    """
    Information on the device and resource that is the source of this alarm
    """
    device: Device

    """
    Current state of the alarm
    """
    currentState: AlarmState

    """
    Condition settings for the alarm that has been triggers
    !!! This is not currently implemented !!!
    """
    alarmLimit: AlarmLimit

    """
    Type of application that generated the alarm
    !!! This is not currently implemented !!!
    """
    applicationType: String

    """
    A description of what this alarm is for
    !!! This is not currently implemented !!!
    """
    description: String

    """
    The alarms group
    !!! This is not currently implemented !!!
    """
    group: String
}

extend type Mutation {
    """
    Disable an alarm

    Disabling an alarm prevents it from evaluating its condition and generating new states.
    When disabled, the alarm will not trigger regardless of the underlying condition state.
    The disabled state persists until explicitly enabled again.
    """
    DisableAlarm(alarmId: ID!): Status

    """
    Enable an alarm

    Enables a previously disabled alarm, allowing it to resume normal operation.
    Once enabled, the alarm will begin evaluating its condition and can generate new states.
    The alarm will immediately evaluate its condition upon being enabled and may transition to an active state
    if the condition criteria are met.
    """
    EnableAlarm(alarmId: ID!): Status

    """
    Suppress an alarm

    Suppression prevents an alarm from being reported even when its condition becomes true.
    Unlike disabling, suppression is typically used for temporary conditions where the alarm should
    not be reported due to known operational conditions (e.g., during startup sequences or specific
    operational modes). The alarm continues to evaluate its condition but will not create new states
    or notifications while suppressed.
    """
    SuppressAlarm(alarmId: ID!): Status

    """
    Unsuppress an alarm

    Removes the suppression state from an alarm, allowing it to resume normal reporting.
    After unsuppression, the alarm will immediately evaluate its condition and may generate
    new states if the condition criteria are met. Any conditions that occurred during
    suppression will become visible if they are still active.
    """
    UnsuppressAlarm(alarmId: ID!): Status

    """
    Shelve an alarm

    Shelving is an operator-initiated action to temporarily prevent an alarm from being displayed.
    Unlike suppression, shelving is typically used for nuisance alarms that are known issues but
    cannot be addressed immediately. The alarm continues to evaluate and maintain its state, but
    is hidden from normal operational views. Shelving persists until explicitly unshelved or
    until a timed shelving period expires
    """
    ShelveAlarm(alarmId: ID!): Status

    """
    Unshelve an alarm

    Removes the shelved state from an alarm, making it visible in operational views again.
    Any alarm conditions that occurred while shelved will become visible if they are still active.
    This is typically used when ready to address previously shelved nuisance alarms.
    """
    UnshelveAlarm(alarmId: ID!): Status

    """
    !!! This is not currently implemented !!!
    Shelve an alarm for a specific fixed time period

    Applies temporary shelving to an alarm for a specified duration. After the duration expires,
    the alarm automatically unshelves. This is useful for temporarily hiding known alarm conditions
    that will be addressed within a specific timeframe. The alarm continues to evaluate its condition
    during the shelving period but remains hidden from normal operational views.
    """
    TimedShelveAlarm(
        alarmId: ID!
        """
        Duration of time (ms) that the alarm should be shelved for
        """
        shelvingTime: Float!
    ): Status

    """
    !!! This is not currently implemented !!!
    Add a comment to an alarm state

    Attaches a comment to a specific alarm state for documentation purposes.
    Comments provide additional context about the alarm state and can be used
    to track operator observations, planned actions, or other relevant information.
    Comments become part of the permanent alarm history.
    """
    AddComment(stateId: ID!, comment: String): Status

    """
    Acknowledge an alarm state

    Acknowledges that an operator is aware of the alarm condition.
    Acknowledgment is typically required for all active alarms and indicates operator awareness
    of the condition. It does not imply that any corrective action has been taken.
    The alarm remains active until its condition returns to normal, even after acknowledgment.
    Some alarms may require both acknowledgment and confirmation before being fully cleared.
    """
    AcknowledgeState(stateId: ID!, comment: String): Status

    """
    Confirm an alarm state

    Confirms that appropriate action has been taken to address the alarm condition.
    Confirmation is typically used in addition to acknowledgment for critical alarms
    where explicit verification of corrective action is required. Some systems may
    require both acknowledgment and confirmation before an alarm can be fully cleared.
    """
    ConfirmState(stateId: ID!, comment: String): Status

    """
    Remove an alarm from service

    Marks an alarm as being out of service, typically during maintenance periods.
    This state indicates that the alarm or its monitored equipment is undergoing
    maintenance and should not generate new states. Unlike suppression or shelving,
    out of service is specifically used for maintenance activities.
    """
    RemoveFromServiceAlarm(alarmId: ID!): Status

    """
    Return an alarm from service

    Returns an alarm to normal operation after being out of service.
    Out of service typically indicates that the monitored equipment is under maintenance
    or the alarm itself is being serviced. Removing from service allows the alarm to
    resume normal operation and begin evaluating its condition again.
    """
    PlaceInServiceAlarm(
        """
        ID of the alarm
        """
        alarmId: ID!
    ): Status

    """
    Reset a latched alarm instance

    Resets a latched alarm to allow it to return to normal state.
    Latched alarms require explicit reset action even after their condition returns
    to normal. This is typically used for critical alarms where explicit operator
    action is required to clear the alarm state. The alarm must be inactive,
    acknowledged, and confirmed (if required) before reset will succeed.
    """
    ResetAlarm(alarmId: ID!): Status
}

type StatesResponse {
    alarmStates: [AlarmState!]
    status: Status
    metadata: Metadata
}

type AlarmsResponse {
    alarms: [Alarm!]
    status: Status
    metadata: Metadata
}

type StateGroupsResponse {
    stateGroups: [StateGroup!]
    status: Status
    metadata: Metadata
}

extend type Query {
    """
    Retrieve all alarms in the system that are stored in system
    """
    Alarms(
        """
        Number of records to skip (for pagination)
        """
        offset: Int = 0

        """
        Maximum number of records to return (for pagination)
        """
        limit: Int = 10

        """
        Field to sort results by (not implemented)
        """
        sortBy: String

        """
        Filter criteria to apply to current alarm states
        """
        filter: Filter
    ): AlarmsResponse

    """
    Retrieves all states in the system which have occurred and are still stored in system
    """
    States(
        """
        Number of records to skip (for pagination)
        """
        offset: Int = 0

        """
        Maximum number of records to return (for pagination)
        """
        limit: Int = 10

        """
        Field to sort results by (not implemented)
        """
        sortBy: String

        """
        Filter criteria to apply to states
        """
        filter: Filter
    ): StatesResponse

    """
    Retrieves all states groups as a query optimization for the front end
    """
    StatesGroups(
        offset: Int = 0
        limit: Int = 10
        sortBy: String
        filter: Filter
    ): StateGroupsResponse
}
enum RoutedStatus {
    NONE
    SUCCESS
    PARTIAL_SUCCESS
    FAILURE
}
input Filter {
    # filter based on id
    alarmId: [String!]
    stateId: [String!]
    stateGroupId: [String!]
    # Filter by severity level
    severity: SeverityType

    # Filter by enabled state
    enabled: Boolean

    # Filter by acknowledged state
    acked: Boolean

    # Filter by confirmed state
    confirmed: Boolean

    # Filter by active state
    active: Boolean

    # Filter by suppressed state
    suppressed: Boolean

    # Filter by shelved state
    shelved: Boolean

    # Filter by out of service state
    outOfService: Boolean

    # Filter by latched state
    latched: Boolean

    # Filter by routed state !!! Not Implemented Yet !!!
    routed: RoutedStatus

    # Filter by retain state
    retain: Boolean

    # Filter by user ID !!! Not Implemented Yet !!!
    userId: String

    # Filter by status code !!! Not Implemented Yet !!!
    status: Int

    # Filter by timestamp range
    startTime: String
    endTime: String
}

type Subscription {
    StateUpdates(filter: Filter): AlarmState!
    AlarmUpdates(filter: Filter): Alarm!
    StateGroupUpdates(filter: Filter): StateGroup!
}

union AlarmLimit =
    LevelAlarmLimit
    | DeviationAlarmLimit
    | RateOfChangeAlarmLimit
    | OffNormalAlarmLimit

enum AlarmType {
    LEVEL
    DEVIATION
    RATE_OF_CHANGE
    OFF_NORMAL
}

interface BaseAlarmLimit {
    type: AlarmType!
    hysteresis: Float
    deadband: Float
}

type LevelAlarmLimit implements BaseAlarmLimit {
    type: AlarmType!
    hysteresis: Float
    deadband: Float
    highHighLimit: Float
    highLimit: Float
    lowLimit: Float
    lowLowLimit: Float
}

type DeviationAlarmLimit implements BaseAlarmLimit {
    type: AlarmType!
    hysteresis: Float
    deadband: Float
    setpoint: Float!
    highDeviation: Float
    lowDeviation: Float
}

type RateOfChangeAlarmLimit implements BaseAlarmLimit {
    type: AlarmType!
    hysteresis: Float
    deadband: Float
    positiveROCLimit: Float
    negativeROCLimit: Float
    timeInterval: Float!
}

type OffNormalAlarmLimit implements BaseAlarmLimit {
    type: AlarmType!
    hysteresis: Float
    deadband: Float
    normalState: String!
    allowedStates: [String!]!
}

type Device {
    deviceName: String
    resourceName: String
}
