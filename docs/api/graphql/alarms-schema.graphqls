#
# Copyright (C) 2024 IOTech Ltd
#
scalar Any

"""
Represents a specific state of an alarm at a point in time
"""
type AlarmState {
    """Unique identifier for the alarm state"""
    id: ID!

    """Branch identifier for state tree management"""
    isBranch: Boolean

    """Severity level of the alarm in this state from 0 to 999"""
    severity: SeverityType!

    """Optional comment associated with this state"""
    comment: String

    """
    Is the state is of interest to a client. This can indicate that some action is still required e.g Acknowledgement
    """
    retain: Boolean!

    """
    Enabled state of the alarm
    """
    enabled: Boolean!

    """
    Acknowledged state of the alarm. When False this indicates the state requires acknowledgement
    """
    acked: Boolean!

    """
    Confirmed state of the alarm. When False this indicates the state requires confirmation.
    """
    confirmed: Boolean

    """
    The active state of the alarm. When True this indicates that the situation the alarm represents exists.
    Transitions of this state can only be done through the result of the evaluation of the condition the alarm is based upon.
    """
    active: Boolean!

    """
    The suppressed state of the alarm. Typically used by the system to suppress alarms due to system specific reasons.
    """
    suppressed: Boolean

    """
    The shelved state of the alarm. Suggests whether an alarm shall be prevented from being displayed to the user.
    Indicates that system operators have blocked a nuisance alarm.
    """
    shelved: Boolean

    """
    The service state of the alarm. Used to indicate that an alarm is in maintenance. Used to ignore alarms from a device that is undergoing maintenance.
    """
    outOfService: Boolean

    """
    The latched state of the alarm. If true the alarm requires additional processing.
    If latching is enabled for the alarm - Once the alarm becomes active this value will be set to true and will remain true until until the state is no longer active,
    is acknowledged, is confirmed (if required) and then reset. The retain property will remain true also for this period.
    """
    latched: Boolean

    """
    Time the state occurred
    """
    timestamp: Int!

    """The alarm routing status"""
    routed: RoutedStatus

    """ID of the user who caused this state change (null if system-generated)"""
    userId: String

    """Status code of the alarm state"""
    status: Int!
}

"""
Represents a complete alarm entity with its current state and history
"""
type Alarm {
    """Unique identifier for the alarm"""
    id: ID!

    """Current state of the alarm"""
    currentState: AlarmState!
    previousStates: [AlarmState!]
    stateBranches: [AlarmState!]

    """Current process value that triggered the alarm"""
    processValue: Any

    """Threshold limit that triggered the alarm"""
    alarmLimit: Any

    """Type of application that generated the alarm"""
    applicationType: String!

    """Identification details of the alarm source (e.g., Device name)"""
    source: String!

    """Human-readable description of the alarm"""
    description: String

    """Grouping category for the alarm"""
    group: String
}

enum RoutedStatus {
    NONE
    SUCCESS
    PARTIAL_SUCCESS
    FAILURE
}

extend type Mutation {
    """
    Disable an alarm
    """
    DisableAlarm(
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status

    """
    Enable an alarm
    """
    EnableAlarm(
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status

    """
    Suppress an alarm
    """
    SuppressAlarm(
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status

    """
    Unsuppress an alarm
    """
    UnsuppressAlarm(
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status

    """
    Shelve an alarm
    """
    ShelveAlarm(
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status

    """
    Unshelve an alarm
    """
    UnshelveAlarm(
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status

    """
    Shelve an alarm for a specific fixed time.
    """
    TimedShelveAlarm(
        """ID of the alarm"""
        alarmId: ID!
        """Duration of time (ms) that the alarm should be shelved for"""
        shelvingTime: Float!
        comment: String
    ): Status


    """
    Add a comment to an alarm state
    """
    AddComment(
        """ID of the state"""
        stateId: ID!
        comment: String
    ): Status

    """
    Acknowledge an alarm state
    """
    AcknowledgeState(
        """ID of the state"""
        stateId: ID!
        comment: String
    ): Status

    """
    Confirm an alarm state
    """
    ConfirmState(
        """ID of the state"""
        stateId: ID!
        comment: String
    ): Status

    """
    Remove an alarm from an out of service state
    """
    RemoveFromServiceAlarm(
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status

    """
    Place an alarm in an out of service state
    """
    PlaceInServiceAlarm(
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status

    """
    Reset a latched alarm instance
    """
    ResetAlarm (
        """ID of the alarm"""
        alarmId: ID!
        comment: String
    ): Status
}
type StatesResponse {
    alarmStates: [AlarmState!]
    status: Status
    metadata: Metadata
}

type AlarmsResponse {
    alarms: [Alarm!]
    status: Status
    metadata: Metadata
}

extend type Query {
    """
    Retrieve all alarm in the system which have ever been active
    """
    Alarms(id: [ID!], offset: Int = 0, limit: Int = 10, sortBy: String, filter: AlarmsFilter): AlarmsResponse

    """
    Retrieves all states in the system which have occurred and are still stored in system
    """
    States(id: [ID!], offset: Int = 0, limit: Int = 10, sortBy: String, filter: StatesFilter): StatesResponse

}

type Subscription {
  StateUpdates: AlarmState!
}

# Input type for filtering alarms
input AlarmsFilter {
  isActive: Boolean
}
# Input type for filtering States
input StatesFilter {
  isActive: Boolean
}