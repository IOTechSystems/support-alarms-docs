scalar JSON

# Routes
type Route {
    id: ID!
    name: String!
    description: String
    conditions: Condition!
    delay: Int
    retries:Int
    schedule: String! # iCalender format
    actions: [Action!]
    tsCreated: String!
    tsModified: String!
}

input RouteCreateRequest {
    name: String!
    description: String
    conditionIds: ID!
    delay: Int
    retries:Int
    schedule: String! # iCalender format
    actionIds: [ID!]
}

input RouteUpdateRequest {
    name: String
    description: String
    conditionIds: ID
    delay: Int
    retries:Int
    schedule: String! # iCalender format
    actionIds: [ID!]
}

# Actions
type Action {
    id: ID!
    name: String!
    description: String
    type: ActionType!
    config: JSON
    enableStatus: ActionEnableStatus
    stopConditionType: ActionStopConditionType
    duration: Int
    tsCreated: String!
    tsModified: String!
}

enum ActionType {
    EMAIL
    ALSENSE
    MQTT
    RELAY
    VARIABLE
    TELEGRAM
}

enum ActionEnableStatus {
    ANYTIME
    ONSCHEDULE
    OFFSCHEDULE
    DISABLED
}

enum ActionStopConditionType {
    NONE
    ONTIME
    ONACKED
    ONCLEARED
}

input ActionCreateRequest {
    name: String!
    description: String
    type: ActionType!
    config: JSON
    enableStatus: ActionEnableStatus!
    stopConditionType: ActionStopConditionType
    duration: Int
}

input ActionUpdateRequest {
    name: String
    description: String
    type: ActionType
    config: JSON
    enableStatus: ActionEnableStatus
    stopConditionType: ActionStopConditionType
    duration: Int
}

# Conditions
type Condition {
    id: ID!
    name: String
    devices: [Device!]
    severities: [SeverityType!]
    tsCreated: String!
    tsModified: String!
}

type Device {
    address: ID
    name: String
    mode: String
    codeNumber: String
    version: String
    group: String
}

enum SeverityType {
    CRITICAL
    HIGH
    MEDIUM
    LOW
}

input DeviceInput {
    address: ID
    name: String
    mode: String
    codeNumber: String
    version: String
    group: String
}

input ConditionCreateRequest {
    name: String
    devices: [DeviceInput!]
    severities: [SeverityType!]
}

input ConditionUpdateRequest {
    name: String
    devices: [DeviceInput!]
    severities: [SeverityType!]
}

type ConditionResponse {
    error: String
    condition: Condition
}

type ActionResponse {
    error: String
    action: Action
}

type RouteResponse {
    error: String
    route: Route
}

type DeleteResponse {
    error: String
}

type Mutation {
    ConditionCreate(input: ConditionCreateRequest!): ConditionResponse!
    ConditionUpdate(id: ID!, input: ConditionUpdateRequest!): ConditionResponse!
    ConditionDelete(id: ID!): DeleteResponse

    ActionCreate(input: ActionCreateRequest!): ActionResponse!
    ActionUpdate(id: ID!, input: ActionUpdateRequest!): ActionResponse!
    ActionDelete(id: ID!): DeleteResponse

    RouteCreate(input: RouteCreateRequest!): RouteResponse!
    RouteUpdate(id: ID!, input: RouteUpdateRequest!): RouteResponse!
    RouteDelete(id: ID!): DeleteResponse
}

type Query {
    Condition(id: ID, name: String, limit: Int, offset: Int, sortBy: String): [Condition!]
    Action(id: ID, name: String, limit: Int, offset: Int, sortBy: String): [Action!]
    Route(id: ID, name: String, conditionId: ID, actionId: ID, limit: Int, offset: Int, sortBy: String): [Route!]
}