scalar JSON

# Routes
type Route {
    """the route ID (in UUID format)"""
    id: ID!

    """the route name"""
    name: String!

    """optional description"""
    description: String

    """associated condition to filter alarms based on devices and alarm severity"""
    condition: Condition!

    """delay time (in minutes) to wait before an alarm is routed"""
    delay: Int

    """the number of retries to run the action before terminated"""
    retries:Int

    """schedule string (in iCalender format) to define the time window when the alarm route is enabled"""
    schedule: String!

    """associated actions to where to route the alarm"""
    actions: [Action!]

    """unix timestamp"""
    tsCreated: String!

    """unix timestamp"""
    tsModified: String!
}

input RouteCreateRequest {
    """the route name"""
    name: String!

    """optional description"""
    description: String

    """the condition ID - single, no wildcards"""
    conditionId: ID!

    """delay time (in minutes) to wait before an alarm is routed"""
    delay: Int

    """the number of retries to run the action before terminated"""
    retries:Int

    """schedule string (in iCalender format) to define the time window when the alarm route is enabled"""
    schedule: String!

    """associated actions IDs to where to route the alarm"""
    actionIds: [ID!]
}

input RouteUpdateRequest {
    """the route name"""
    name: String
    description: String

    """the condition ID - single, no wildcards"""
    conditionId: ID

    """delay time (in minutes) to wait before an alarm is routed"""
    delay: Int

    """the number of retries to run the action before terminated"""
    retries:Int

    """schedule string (in iCalender format) to define the time window when the alarm route is enabled"""
    schedule: String!

    """associated actions IDs to where to route the alarm"""
    actionIds: [ID!]
}

# Actions
type Action {
    """the action ID (in UUID format)"""
    id: ID!

    """the action name"""
    name: String!

    """optional  description"""
    description: String

    """Action types """
    type: ActionType!

    """Action configuration (in JSON format)"""
    config: JSON

    """Action trigger mode"""
    enableStatus: ActionEnableStatus

    """stop conditions for Relay actions"""
    stopConditionType: ActionStopConditionType

    """the length of time (in seconds) the alarm output will be active"""
    duration: Int

    """unix timestamp"""
    tsCreated: String!

    """unix timestamp"""
    tsModified: String!
}

enum ActionType {
    EMAIL
    ALSENSE
    MQTT
    RELAY
    VARIABLE
    TELEGRAM
}

enum ActionEnableStatus {
    ANYTIME
    ONSCHEDULE
    OFFSCHEDULE
    DISABLED
}

enum ActionStopConditionType {
    NONE
    ONTIME
    ONACKED
    ONCLEARED
}

input ActionCreateRequest {
    """the action name"""
    name: String!

    """optional  description"""
    description: String

    """Action types """
    type: ActionType!

    """Action configuration (in JSON format)"""
    config: JSON

    """Action trigger mode"""
    enableStatus: ActionEnableStatus!

    """stop conditions for Relay actions"""
    stopConditionType: ActionStopConditionType

    """the length of time (in seconds) the alarm output will be active"""
    duration: Int
}

input ActionUpdateRequest {
    """the action name"""
    name: String

    """optional  description"""
    description: String

    """Action types """
    type: ActionType

    """Action configuration (in JSON format)"""
    config: JSON

    """Action trigger mode"""
    enableStatus: ActionEnableStatus

    """stop conditions for Relay actions"""
    stopConditionType: ActionStopConditionType

    """the length of time (in seconds) the alarm output will be active"""
    duration: Int
}

# Conditions
type Condition {
    """the condition ID (in UUID format)"""
    id: ID!

    """optional name"""
    name: String

    """devices details"""
    devices: [Device!]

    """alarm severities"""
    severities: [SeverityType!]

    """unix timestamp"""
    tsCreated: String!

    """unix timestamp"""
    tsModified: String!
}

type Device {
    address: ID
    name: String
    mode: String
    codeNumber: String
    version: String
    group: String
}

enum SeverityType {
    CRITICAL
    HIGH
    MEDIUM
    LOW
}

input DeviceInput {
    address: ID
    name: String
    mode: String
    codeNumber: String
    version: String
    group: String
}

input ConditionCreateRequest {
    """optional name"""
    name: String

    """devices details"""
    devices: [DeviceInput!]


    severities: [SeverityType!]
}

input ConditionUpdateRequest {
    """optional name"""
    name: String

    """devices details"""
    devices: [DeviceInput!]

    """alarm severities"""
    severities: [SeverityType!]
}

type ConditionResponse {
    error: String
    condition: Condition
}

type ActionResponse {
    error: String
    action: Action
}

type RouteResponse {
    error: String
    route: Route
}

type DeleteResponse {
    error: String
}

type Mutation {
    """
    Create a condition

    Equivalent to POST /condition
    """
    ConditionCreate(input: ConditionCreateRequest!): ConditionResponse!

    """
    Update a condition

    Equivalent to PATCH /condition
    """
    ConditionUpdate(
        """Condition ID - single, no wildcards"""
        id: ID!, input: ConditionUpdateRequest!
    ): ConditionResponse!

    """
    delete a condition

    Equivalent to DELETE /condition
    """
    ConditionDelete(
        """Condition ID - single, no wildcards"""
        id: ID!
    ): DeleteResponse

    """
    Create an action

    Equivalent to POST /action
    """
    ActionCreate(input: ActionCreateRequest!): ActionResponse!

    """
    Update an action

    Equivalent to PATCH /action
    """
    ActionUpdate(
        """action ID - single, no wildcards"""
        id: ID!,
        input: ActionUpdateRequest!
    ): ActionResponse!

    """
    Delete an action

    Equivalent to DELETE /action
    """
    ActionDelete(
        """action ID - single, no wildcards"""
        id: ID!
    ): DeleteResponse

    """
    Create a route

    Equivalent to POST /route
    """
    RouteCreate(input: RouteCreateRequest!): RouteResponse!

    """
    Update a route

    Equivalent to PATCH /route
    """
    RouteUpdate(
        """Route ID - single, no wildcards"""
        id: ID!,
        input: RouteUpdateRequest!
    ): RouteResponse!

    """
    Delete a route

    Equivalent to DELETE /route
    """
    RouteDelete(
        """Route ID - single, no wildcards"""
        id: ID!
    ): DeleteResponse
}

type Query {
    """
    List conditions

    Equivalent to GET /conditions
    """
    Condition(
        """Get by condition ID"""
        id: ID,

        """Get by condition name"""
        name: String,

        """Limit the number of returned results"""
        limit: Int,

        """Offset the returned results"""
        offset: Int,

        """
        Sort in ascending/descending order on a chosen field, for example: desc(name), asc(name). If asc/desc is not provided, defaults to ascending.
        """
        sortBy: String
    ): [Condition!]

    """
    List actions

    Equivalent to GET /actions
    """
    Action(
        """Get by action ID"""
        id: ID,

        """Get by action name"""
        name: String,

        """Limit the number of returned results"""
        limit: Int,

        """Offset the returned results"""
        offset: Int,

        """
        Sort in ascending/descending order on a chosen field, for example: desc(name), asc(name). If asc/desc is not provided, defaults to ascending.
        """
        sortBy: String
    ): [Action!]

    """
    List routes

    Equivalent to GET /routes
    """
    Route(
        """Get by route ID"""
        id: ID,

        """Get by route name"""
        name: String,

        """Get by condition ID"""
        conditionId: ID,

        """Get by action ID"""
        actionId: ID,

        """Limit the number of returned results"""
        limit: Int,

        """Offset the returned results"""
        offset: Int,

        """
        Sort in ascending/descending order on a chosen field, for example: desc(name), asc(name). If asc/desc is not provided, defaults to ascending.
        """
        sortBy: String
    ): [Route!]
}
