scalar JSON

# Routes
type Route {
    """The route ID (in UUID format)"""
    id: ID!

    """The route name"""
    name: String!

    """Optional description"""
    description: String

    """Associated condition to filter alarms based on devices and alarm severity"""
    condition: Condition!

    """Delay time (in minutes) to wait before an alarm is routed"""
    delay: Int

    """The number of retries to run the action before terminated"""
    retries:Int

    """Schedule string (in iCalender format) to define the time window when the alarm route is enabled"""
    schedule: String!

    """Associated actions to where to route the alarm"""
    actions: [Action!]

    """Route enabled status"""
    enableStatus: Boolean

    """Unix timestamp"""
    tsCreated: String!

    """Unix timestamp"""
    tsModified: String!
}

input RouteCreateRequest {
    """The route name"""
    name: String!

    """Optional description"""
    description: String

    """The condition ID - single, no wildcards"""
    conditionId: ID!

    """Delay time (in minutes) to wait before an alarm is routed"""
    delay: Int

    """The number of retries to run the action before terminated"""
    retries:Int

    """Schedule string (in iCalender format) to define the time window when the alarm route is enabled"""
    schedule: String!

    """Route enabled status"""
    enableStatus: Boolean!
}

input RouteUpdateRequest {
    """The route name"""
    name: String
    description: String

    """The condition ID - single, no wildcards"""
    conditionId: ID

    """Delay time (in minutes) to wait before an alarm is routed"""
    delay: Int

    """The number of retries to run the action before terminated"""
    retries:Int

    """Schedule string (in iCalender format) to define the time window when the alarm route is enabled"""
    schedule: String

    """Route enabled status"""
    enableStatus: Boolean
}

# Actions
type Action {
    """The action ID (in UUID format)"""
    id: ID!

    """The action name"""
    name: String!

    """Optional  description"""
    description: String

    """Action types """
    type: ActionType!

    """Action configuration (in JSON format)"""
    config: JSON

    """Action enabled status"""
    enableStatus: Boolean

    """Stop conditions for Relay actions"""
    stopConditionType: ActionStopConditionType

    """The length of time (in seconds) the alarm output will be active"""
    duration: Int

    """Unix timestamp"""
    tsCreated: String!

    """Unix timestamp"""
    tsModified: String!
}

enum ActionType {
    EMAIL
    ALSENSE
    MQTT
    RELAY
    VARIABLE
    TELEGRAM
}

"""
Defines the stop conditions for the actions of alarm relay type
"""
enum ActionStopConditionType {
    """No stop condition"""
    NONE

    """the alarm output will remain active until the duration defined in the action has elapsed"""
    ONTIME

    """the alarm output will remain active until it is acknowledged"""
    ONACKED

    """the alarm output will remain active until it is cleared"""
    ONCLEARED
}

input ActionCreateRequest {
    """The action name"""
    name: String!

    """Optional  description"""
    description: String

    """Action types """
    type: ActionType!

    """Action configuration (in JSON format)"""
    config: JSON

    """Action trigger mode"""
    enableStatus: Boolean!

    """Stop conditions for Relay actions"""
    stopConditionType: ActionStopConditionType

    """The length of time (in seconds) the alarm output will be active"""
    duration: Int
}

input ActionUpdateRequest {
    """The action name"""
    name: String

    """Optional  description"""
    description: String

    """Action types """
    type: ActionType

    """Action configuration (in JSON format)"""
    config: JSON

    """Action trigger mode"""
    enableStatus: Boolean

    """Stop conditions for Relay actions"""
    stopConditionType: ActionStopConditionType

    """The length of time (in seconds) the alarm output will be active"""
    duration: Int
}

# Conditions
type Condition {
    """The condition ID (in UUID format)"""
    id: ID!

    """Optional name"""
    name: String

    """Device names details"""
    deviceNames: [String!]

    """Device groups details"""
    deviceGroups: [String!]

    """Alarm severities"""
    severities: [SeverityType!]

    """Unix timestamp"""
    tsCreated: String!

    """Unix timestamp"""
    tsModified: String!
}

enum SeverityType {
    CRITICAL
    HIGH
    MEDIUM
    LOW
}

input ConditionCreateRequest {
    """Condition name"""
    name: String!

    """Device names details"""
    deviceNames: [String!]

    """Device groups details"""
    deviceGroups: [String!]

    """Alarm severities"""
    severities: [SeverityType!]
}

input ConditionUpdateRequest {
    """Optional name"""
    name: String

    """Device names details"""
    deviceNames: [String!]

    """Device groups details"""
    deviceGroups: [String!]

    """Alarm severities"""
    severities: [SeverityType!]
}

type ConditionResponse {
    condition: Condition
    status: Status
}

type ActionResponse {
    action: Action
    status: Status
}

type RouteResponse {
    route: Route
    status: Status
}

type ConditionsResponse {
    conditions: [Condition!]
    status: Status
    metadata: Metadata
}

type ActionsResponse {
    actions: [Action!]
    status: Status
    metadata: Metadata
}

type RoutesResponse {
    routes: [Route!]
    status: Status
    metadata: Metadata
}

type Mutation {
    """
    Create a condition

    Equivalent to POST /condition
    """
    ConditionCreate(input: ConditionCreateRequest!): ConditionResponse!

    """
    Update a condition

    Equivalent to PATCH /condition
    """
    ConditionUpdate(
        """Condition ID - single, no wildcards"""
        id: ID!, input: ConditionUpdateRequest!
    ): ConditionResponse!

    """
    Delete a condition

    Equivalent to DELETE /condition
    """
    ConditionDelete(
        """Condition ID - single, no wildcards"""
        id: ID!
    ): Status

    """
    Create an action

    Equivalent to POST /action
    """
    ActionCreate(input: ActionCreateRequest!): ActionResponse!

    """
    Update an action

    Equivalent to PATCH /action
    """
    ActionUpdate(
        """action ID - single, no wildcards"""
        id: ID!,
        input: ActionUpdateRequest!
    ): ActionResponse!

    """
    Delete an action

    Equivalent to DELETE /action
    """
    ActionDelete(
        """action ID - single, no wildcards"""
        id: ID!
    ): Status

    """
    Create a route

    Equivalent to POST /route
    """
    RouteCreate(input: RouteCreateRequest!): RouteResponse!

    """
    Update a route

    Equivalent to PATCH /route
    """
    RouteUpdate(
        """Route ID - single, no wildcards"""
        id: ID!,
        input: RouteUpdateRequest!
    ): RouteResponse

    """
    Delete a route

    Equivalent to DELETE /route
    """
    RouteDelete(
        """Route ID - single, no wildcards"""
        id: ID!
    ): Status

    """
    Associate an action with a route
    """
    RouteActionAssociate(
        actionId: ID!
        routeId: ID!
    ): RouteResponse

    """
    Dissociate an action from a route
    """
    RouteActionDissociate(
        actionId: ID!
        routeId: ID!
    ): RouteResponse
}

type Query {
    """
    List conditions

    Equivalent to GET /conditions
    """
    Condition(
        """Get by condition ID"""
        id: ID,

        """Get by condition name"""
        name: String,

        """Limit the number of returned results"""
        limit: Int,

        """Offset the returned results"""
        offset: Int,

        """
        Sort in ascending/descending order on a chosen field, for example: desc(name), asc(name). If asc/desc is not provided, defaults to ascending.
        """
        sortBy: String
    ): ConditionsResponse

    """
    List actions

    Equivalent to GET /actions
    """
    Action(
        """Get by action ID"""
        id: ID,

        """Get by action name"""
        name: String,

        """Limit the number of returned results"""
        limit: Int,

        """Offset the returned results"""
        offset: Int,

        """
        Sort in ascending/descending order on a chosen field, for example: desc(name), asc(name). If asc/desc is not provided, defaults to ascending.
        """
        sortBy: String
    ): ActionsResponse

    """
    List routes

    Equivalent to GET /routes
    """
    Route(
        """Get by route ID"""
        id: ID,

        """Get by route name"""
        name: String,

        """Get by condition ID"""
        conditionId: ID,

        """Get by action ID"""
        actionId: ID,

        """Limit the number of returned results"""
        limit: Int,

        """Offset the returned results"""
        offset: Int,

        """
        Sort in ascending/descending order on a chosen field, for example: desc(name), asc(name). If asc/desc is not provided, defaults to ascending.
        """
        sortBy: String
    ): RoutesResponse
}

type Metadata {
  count: Int
  limit: Int
  offset: Int
  total: Int
}

type Status {
    error: String
}