openapi: 3.0.0
info:
  title: Alarm Management API
  description: API for managing and routing alarms
  version: 3.0.0
  contact:
    name: iotechsys
    email: support@iotechsys.com

servers:
  - url: /api/v3

tags:
  - name: alarms
    description: Alarm management operations
  - name: states
    description: State management operations
  - name: stategroups
    description: State group operations
  - name: routes
    description: Alarm routing operations
  - name: actions
    description: Alarm action operations
  - name: conditions
    description: Alarm condition operations

paths:
  /alarms:
    get:
      tags:
        - alarms
      summary: List alarms
      description: Retrieve a list of all alarms in the system with filtering capabilities
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items to return
        - $ref: '#/components/parameters/alarmsSortBy'
        - name: severity
          in: query
          schema:
            type: string
            enum: [CRITICAL, HIGH, MEDIUM, LOW]
          description: Filter by severity level
        - name: enabled
          in: query
          schema:
            type: boolean
          description: Filter by enabled status
        - name: latched
          in: query
          schema:
            type: boolean
          description: Filter by latched status
        - name: suppressed
          in: query
          schema:
            type: boolean
          description: Filter by suppressed status
        - name: shelved
          in: query
          schema:
            type: boolean
          description: Filter by shelved status
        - name: outOfService
          in: query
          schema:
            type: boolean
          description: Filter by out of service status
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlarmsResponse'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /alarms/id/{id}:
    get:
      tags:
        - alarms
      summary: Get alarm by ID
      description: Retrieve a specific alarm by its unique identifier
      parameters:
        - $ref: '#/components/parameters/alarmId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alarm'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - alarms
      summary: Modify alarm state
      description: Execute state transition operations on an alarm (enable, disable, suppress, etc.)
      parameters:
        - $ref: '#/components/parameters/alarmId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum:
                    - enable
                    - disable
                    - suppress
                    - unsuppress
                    - shelve
                    - unshelve
                    - reset
                    - serviceRemove
                    - servicePlace
                  description: The state transition method to execute
                parameters:
                  type: object
                  description: Optional method-specific parameters
                  properties:
                    shelvingTime:
                      type: number
                      format: float
                      description: Duration in milliseconds for timed shelving (only used with shelve method)
              example:
                method: "shelve"
                parameters:
                  shelvingTime: 3600000
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /states:
    get:
      tags:
        - states
      summary: List states
      description: Retrieve a list of all states with filtering capabilities
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            default: 20
          description: Number of items to return
        - $ref: '#/components/parameters/statesSortBy'
        - name: alarmId
          in: query
          schema:
            type: string
          description: Filter by associated alarm ID
        - name: severity
          in: query
          schema:
            type: string
            enum: [CRITICAL, HIGH, MEDIUM, LOW]
          description: Filter by severity level
        - name: retain
          in: query
          schema:
            type: boolean
          description: Filter by retain status
        - name: enabled
          in: query
          schema:
            type: boolean
          description: Filter by enabled status
        - name: acked
          in: query
          schema:
            type: boolean
          description: Filter by acknowledged status
        - name: confirmed
          in: query
          schema:
            type: boolean
          description: Filter by confirmed status
        - name: active
          in: query
          schema:
            type: boolean
          description: Filter by active status
        - name: suppressed
          in: query
          schema:
            type: boolean
          description: Filter by suppressed status
        - name: shelved
          in: query
          schema:
            type: boolean
          description: Filter by shelved status
        - name: outOfService
          in: query
          schema:
            type: boolean
          description: Filter by out of service status
        - name: latched
          in: query
          schema:
            type: boolean
          description: Filter by latched status
        - name: timestampStart
          in: query
          schema:
            type: integer
          description: Filter by timestamp range start (unix timestamp)
        - name: timestampEnd
          in: query
          schema:
            type: integer
          description: Filter by timestamp range end (unix timestamp)
        - name: routed
          in: query
          schema:
            type: string
            enum: [NONE, SUCCESS, PARTIAL_SUCCESS, FAILURE]
          description: Filter by routing status
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatesResponse'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /states/id/{id}:
    put:
      tags:
        - states
      summary: Modify state
      description: Execute state transition operations (acknowledge, confirm)
      parameters:
        - $ref: '#/components/parameters/stateId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - method
              properties:
                method:
                  type: string
                  enum:
                    - acknowledge
                    - confirm
                  description: The state transition method to execute
                comment:
                  $ref: '#/components/schemas/CommentInput'
              example:
                method: "acknowledge"
                comment:
                  text: "Acknowledged by operator John Smith"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /routes:
    get:
      tags:
        - routes
      summary: List routes
      description: Retrieve a list of all alarm routes
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Filter by route ID
        - name: name
          in: query
          schema:
            type: string
          description: Filter by route name
        - name: conditionId
          in: query
          schema:
            type: string
          description: Filter by condition ID
        - name: actionId
          in: query
          schema:
            type: string
          description: Filter by action ID
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items to return
        - $ref: '#/components/parameters/routesSortBy'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


    post:
      tags:
        - routes
      summary: Create route
      description: Create a new alarm route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteCreateRequest'
      responses:
        '201':
          description: Route created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /routes/id/{id}:
    patch:
      tags:
        - routes
      summary: Update route
      description: Update an existing alarm route
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string

          description: Route ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteUpdateRequest'
      responses:
        '200':
          description: Route updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - routes
      summary: Delete route
      description: Delete an alarm route
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string

          description: Route ID
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /routes/routeId/{routeId}/actions/actionId/{actionId}:
    post:
      tags:
        - routes
      summary: Associate action with route
      description: Associate an action with a route
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: string
          description: Route ID
        - name: actionId
          in: path
          required: true
          schema:
            type: string

          description: Action ID
      responses:
        '200':
          description: Action associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - routes
      summary: Dissociate action from route
      description: Remove an action's association with a route
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: string
          description: Route ID
        - name: actionId
          in: path
          required: true
          schema:
            type: string
          description: Action ID
      responses:
        '200':
          description: Action dissociated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /actions:
    get:
      tags:
        - actions
      summary: List actions
      description: Retrieve a list of all alarm actions
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Filter by action ID
        - name: name
          in: query
          schema:
            type: string
          description: Filter by action name
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items to return
        - $ref: '#/components/parameters/actionsSortBy'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsResponse'

    post:
      tags:
        - actions
      summary: Create action
      description: Create a new alarm action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionCreateRequest'
      responses:
        '201':
          description: Action created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /actions/id/{id}:
    patch:
      tags:
        - actions
      summary: Update action
      description: Update an existing alarm action
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Action ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionUpdateRequest'
      responses:
        '200':
          description: Action updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - actions
      summary: Delete action
      description: Delete an alarm action
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Action ID
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /conditions:
    get:
      tags:
        - conditions
      summary: List conditions
      description: Retrieve a list of all alarm conditions
      parameters:
        - name: id
          in: query
          schema:
            type: string
          description: Filter by condition ID
        - name: name
          in: query
          schema:
            type: string
          description: Filter by condition name
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items to return
        - $ref: '#/components/parameters/conditionsSortBy'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionsResponse'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


    post:
      tags:
        - conditions
      summary: Create condition
      description: Create a new alarm condition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConditionCreateRequest'
      responses:
        '201':
          description: Condition created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /conditions/id/{id}:
    patch:
      tags:
        - conditions
      summary: Update condition
      description: Update an existing alarm condition
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Condition ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConditionUpdateRequest'
      responses:
        '200':
          description: Condition updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - conditions
      summary: Delete condition
      description: Delete an alarm condition
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string

          description: Condition ID
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /test-alarm:
    post:
      tags:
        - misc
      summary: Trigger test alarm
      description: Trigger a test alarm with specified severity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - severity
              properties:
                severity:
                  type: string
                  enum: [CRITICAL, HIGH, MEDIUM, LOW]
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - misc
      summary: Reset test alarm
      description: Reset the test alarm
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /route-failed-alarm:
    patch:
      tags:
        - misc
      summary: Reset route failed alarm
      description: Reset the route failed alarm for a specific action type
      parameters:
        - name: actionType
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ActionType'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /stategroups:
    get:
      tags:
        - stategroups
      summary: List state groups
      description: Retrieve a list of all state groups
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items to return
        - $ref: '#/components/parameters/stateGroupsSortBy'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateGroupsResponse'
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401': 
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:
  parameters:
    alarmsSortBy:
      name: sortBy
      in: query
      schema:
        type: string
      description: |
        Field to sort alarms by. Use prefix 'desc()' for descending order.
        Example: 'device' for ascending, 'desc(device)' for descending.
        
        Available fields:
        * device
        * applicationType
        * description
        * group
        * tsCreated
        * tsModified
      examples:
        ascDevice:
          value: "device"
          summary: "Sort by device name ascending"
        descDevice:
          value: "desc(device)"
          summary: "Sort by device name descending"
        ascType:
          value: "applicationType"
          summary: "Sort by application type ascending"
    statesSortBy:
      name: sortBy
      in: query
      schema:
        type: string
      description: |
        Field to sort states by. Use prefix 'desc()' for descending order.
        Example: 'severity' for ascending, 'desc(severity)' for descending.
        
        Available fields:
        * severity
        * comment
        * retain
        * enabled
        * acked
        * confirmed
        * active
        * suppressed
        * shelved
        * outOfService
        * latched
        * timestamp
        * routed
        * userId
        * status
        * tsCreated
        * tsModified
      examples:
        ascSeverity:
          value: "severity"
          summary: "Sort by severity ascending"
        descTimestamp:
          value: "desc(timestamp)"
          summary: "Sort by timestamp descending"

    stateGroupsSortBy:
      name: sortBy
      in: query
      schema:
        type: string
      description: |
        Field to sort state groups by. Use prefix 'desc()' for descending order.
        
        Available fields:
        * tsCreated
        * tsModified
      examples:
        ascCreated:
          value: "tsCreated"
          summary: "Sort by creation time ascending"

    conditionsSortBy:
      name: sortBy
      in: query
      schema:
        type: string
      description: |
        Field to sort conditions by. Use prefix 'desc()' for descending order.
        
        Available fields:
        * name
        * tsCreated
        * tsModified
      examples:
        ascName:
          value: "name"
          summary: "Sort by name ascending"

    actionsSortBy:
      name: sortBy
      in: query
      schema:
        type: string
      description: |
        Field to sort actions by. Use prefix 'desc()' for descending order.
        
        Available fields:
        * name
        * description
        * type
        * enableStatus
        * stopConditionType
        * duration
        * tsCreated
        * tsModified
      examples:
        ascName:
          value: "name"
          summary: "Sort by name ascending"
        descType:
          value: "desc(type)"
          summary: "Sort by action type descending"

    routesSortBy:
      name: sortBy
      in: query
      schema:
        type: string
      description: |
        Field to sort routes by. Use prefix 'desc()' for descending order.
        
        Available fields:
        * name
        * description
        * delay
        * retries
        * enableStatus
        * tsCreated
        * tsModified
      examples:
        ascName:
          value: "name"
          summary: "Sort by name ascending"
        descDelay:
          value: "desc(delay)"
          summary: "Sort by delay descending"
    alarmId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: Unique identifier of the alarm
    
    stateId:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: Unique identifier of the state

  responses:
    Success:
      description: Operation completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseResponse'

    BadRequest:
      description: Invalid request parameters or validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication credentials are missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Not enough permissions to perform the requested operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InvalidStateTransition:
      description: Invalid state transition
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    BaseResponse:
      type: object
      properties:
        apiVersion:
          type: string
          example: "v3"
        message:
          type: string
    ErrorResponse:
      type: object
      properties:
        apiVersion:
          type: string
          example: "v3"
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string

    AlarmsResponse:
      type: object
      properties:
        alarms:
          type: array
          items:
            $ref: '#/components/schemas/Alarm'
        status:
          $ref: '#/components/schemas/BaseResponse'
        metadata:
          type: object
          properties:
            totalCount:
              type: integer

    StatesResponse:
      type: object
      properties:
        states:
          type: array
          items:
            $ref: '#/components/schemas/State'
        status:
          $ref: '#/components/schemas/BaseResponse'
        metadata:
          type: object
          properties:
            totalCount:
              type: integer

    StateGroupsResponse:
      type: object
      properties:
        stateGroups:
          type: array
          items:
            $ref: '#/components/schemas/StateGroup'
        status:
          $ref: '#/components/schemas/BaseResponse'
        metadata:
          type: object
          properties:
            totalCount:
              type: integer

    State:
      type: object
      description: Represents the state of an alarm
      properties:
        id:
          type: string
        alarmId:
          type: string
        severity:
          type: string
          enum: [CRITICAL, MAJOR, MINOR, WARNING, INFO]
        comment:
          type: string
          description: Optional comment associated with this state
        retain:
          type: boolean
          description: Indicates if the state requires attention
        enabled:
          type: boolean
          description: Indicates if the alarm is enabled
        acked:
          type: boolean
          description: Indicates if the alarm has been acknowledged
        confirmed:
          type: boolean
          description: Indicates if corrective action has been taken
        active:
          type: boolean
          description: Indicates if the alarm condition is currently active
        suppressed:
          type: boolean
          description: Indicates if the alarm is suppressed
        shelved:
          type: boolean
          description: Indicates if the alarm is shelved
        outOfService:
          type: boolean
          description: Indicates if the alarm is in maintenance
        latched:
          type: boolean
          description: Indicates if the alarm requires additional processing
        timestamp:
          type: string
          description: UNIX Timestamp
        routed:
          type: string
          enum: [NONE, SUCCESS, PARTIAL_SUCCESS, FAILURE]
          description: Alarm routing status
        userId:
          type: string
          description: ID of the user who caused the state change
        status:
          type: integer
          description: Status code of the alarm state

    Alarm:
      type: object
      description: Represents an alarm configuration
      properties:
        id:
          type: string
        currentStateGroupId:
          type: string
        device:
          $ref: '#/components/schemas/Device'
        currentState:
          $ref: '#/components/schemas/State'
        alarmLimit:
          oneOf:
            - $ref: '#/components/schemas/LevelAlarmLimit'
            - $ref: '#/components/schemas/DeviationAlarmLimit'
            - $ref: '#/components/schemas/RateOfChangeAlarmLimit'
            - $ref: '#/components/schemas/OffNormalAlarmLimit'
        description:
          type: string
        group:
          type: string
        applicationType:
          type: string

    StateGroup:
      type: object
      description: Represents a lifecycle of states from active to inactive
      properties:
        id:
          type: string
        alarmId:
          type: string
        stateIds:
          type: array
          items:
            type: string
        initialState:
          $ref: '#/components/schemas/State'
        currentState:
          $ref: '#/components/schemas/State'
        complete:
          type: boolean
          description: Whether this group is historical
        duration:
          type: number
          format: float
          description: Duration from active to inactive state
        triggeredValue:
          type: object
          description: Current process value that triggered the alarm

    Device:
      type: object
      properties:
        deviceName:
          type: string
        resourceName:
          type: string

    BaseAlarmLimit:
      type: object
      properties:
        type:
          type: string
          enum: [LEVEL, DEVIATION, RATE_OF_CHANGE, OFF_NORMAL]
        hysteresis:
          type: number
          format: float
        deadband:
          type: number
          format: float

    LevelAlarmLimit:
      allOf:
        - $ref: '#/components/schemas/BaseAlarmLimit'
        - type: object
          properties:
            highHighLimit:
              type: number
              format: float
            highLimit:
              type: number
              format: float
            lowLimit:
              type: number
              format: float
            lowLowLimit:
              type: number
              format: float

    DeviationAlarmLimit:
      allOf:
        - $ref: '#/components/schemas/BaseAlarmLimit'
        - type: object
          properties:
            setpoint:
              type: number
              format: float
            highDeviation:
              type: number
              format: float
            lowDeviation:
              type: number
              format: float

    RateOfChangeAlarmLimit:
      allOf:
        - $ref: '#/components/schemas/BaseAlarmLimit'
        - type: object
          properties:
            positiveROCLimit:
              type: number
              format: float
            negativeROCLimit:
              type: number
              format: float
            timeInterval:
              type: number
              format: float

    OffNormalAlarmLimit:
      allOf:
        - $ref: '#/components/schemas/BaseAlarmLimit'
        - type: object
          properties:
            normalState:
              type: string
            allowedStates:
              type: array
              items:
                type: string

    CommentInput:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 1000

    Route:
      type: object
      properties:
        id:
          type: string
          description: The route ID
        name:
          type: string
          description: The route name
        description:
          type: string
          description: Optional description
        condition:
          $ref: '#/components/schemas/Condition'
        delay:
          type: integer
          description: Delay time (in minutes) to wait before an alarm is routed
        retries:
          type: integer
          description: The number of retries to run the action before terminated
        schedule:
          type: string
          description: Schedule string (in iCalender format) for route enablement window
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        enableStatus:
          type: boolean
          description: Route enabled status
        tsCreated:
          type: string
        tsModified:
          type: string
        userCreated:
          type: string
        userModified:
          type: string

    RouteCreateRequest:
      type: object
      required:
        - name
        - conditionId
        - schedule
        - enableStatus
      properties:
        name:
          type: string
        description:
          type: string
        conditionId:
          type: string
        delay:
          type: integer
        retries:
          type: integer
        schedule:
          type: string
        enableStatus:
          type: boolean

    RouteUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        conditionId:
          type: string
        delay:
          type: integer
        retries:
          type: integer
        schedule:
          type: string
        enableStatus:
          type: boolean

    Action:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/ActionType'
        config:
          type: object
        enableStatus:
          type: boolean
        stopConditionType:
          $ref: '#/components/schemas/ActionStopConditionType'
        duration:
          type: integer
        tsCreated:
          type: string
        tsModified:
          type: string
        userCreated:
          type: string
        userModified:
          type: string

    ActionType:
      type: string
      enum:
        - EMAIL
        - ALSENSE
        - MQTT
        - RELAY
        - VARIABLE
        - TELEGRAM

    ActionStopConditionType:
      type: string
      enum:
        - NONE
        - ONTIME
        - ONACKED
        - ONCLEARED

    ActionCreateRequest:
      type: object
      required:
        - name
        - type
        - enableStatus
      properties:
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/ActionType'
        config:
          type: string
        enableStatus:
          type: boolean
        stopConditionType:
          $ref: '#/components/schemas/ActionStopConditionType'
        duration:
          type: integer

    ActionUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          $ref: '#/components/schemas/ActionType'
        config:
          type: object
        enableStatus:
          type: boolean
        stopConditionType:
          $ref: '#/components/schemas/ActionStopConditionType'
        duration:
          type: integer

    Condition:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        deviceNames:
          type: array
          items:
            type: string
        deviceGroups:
          type: array
          items:
            type: string
        severities:
          type: array
          items:
            $ref: '#/components/schemas/SeverityType'
        tsCreated:
          type: string
        tsModified:
          type: string
        userCreated:
          type: string
        userModified:
          type: string
          
    SeverityType:
      type: string
      enum:
        - CRITICAL
        - HIGH
        - MEDIUM
        - LOW

    ConditionCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        deviceNames:
          type: array
          items:
            type: string
        deviceGroups:
          type: array
          items:
            type: string
        severities:
          type: array
          items:
            $ref: '#/components/schemas/SeverityType'

    ConditionUpdateRequest:
      type: object
      properties:
        name:
          type: string
        deviceNames:
          type: array
          items:
            type: string
        deviceGroups:
          type: array
          items:
            type: string
        severities:
          type: array
          items:
            $ref: '#/components/schemas/SeverityType'

    ConditionResponse:
      type: object
      properties:
        condition:
          $ref: '#/components/schemas/Condition'
        status:
          $ref: '#/components/schemas/Status'

    ActionResponse:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/Action'
        status:
          $ref: '#/components/schemas/Status'

    RouteResponse:
      type: object
      properties:
        route:
          $ref: '#/components/schemas/Route'
        status:
          $ref: '#/components/schemas/Status'

    ConditionsResponse:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        status:
          $ref: '#/components/schemas/Status'
        metadata:
          $ref: '#/components/schemas/Metadata'

    ActionsResponse:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        status:
          $ref: '#/components/schemas/Status'
        metadata:
          $ref: '#/components/schemas/Metadata'

    RoutesResponse:
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        status:
          $ref: '#/components/schemas/Status'
        metadata:
          $ref: '#/components/schemas/Metadata'

    Metadata:
      type: object
      properties:
        count:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        total:
          type: integer

    Status:
      type: object
      properties:
        error:
          type: string
